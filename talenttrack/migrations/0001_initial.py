# Generated by Django 2.2 on 2021-06-27 09:13

import WeXlog.storage_backends
from decimal import Decimal
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django_countries.fields
import talenttrack.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('enterprises', '0001_initial'),
        ('db_flatten', '0001_initial'),
        ('project', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Achievements',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('achievement', models.CharField(max_length=500)),
                ('date_achieved', models.DateField()),
                ('description', models.TextField(verbose_name='Describe the Achievement')),
                ('upload', models.FileField(blank=True, null=True, storage=WeXlog.storage_backends.PrivateMediaStorage(), upload_to=talenttrack.models.AchFilename, validators=[django.core.validators.FileExtensionValidator(['pdf'])])),
                ('thumbnail', models.ImageField(blank=True, null=True, storage=WeXlog.storage_backends.PrivateMediaStorage(), upload_to=talenttrack.models.AchThumbnail)),
                ('slug', models.SlugField(blank=True, max_length=15, null=True, unique=True)),
            ],
            options={
                'ordering': ['-date_achieved'],
            },
        ),
        migrations.CreateModel(
            name='Awards',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('award', models.CharField(max_length=500)),
                ('date_achieved', models.DateField()),
                ('description', models.TextField(verbose_name='Describe the Award')),
                ('upload', models.FileField(blank=True, null=True, storage=WeXlog.storage_backends.PrivateMediaStorage(), upload_to=talenttrack.models.AwardFilename, validators=[django.core.validators.FileExtensionValidator(['pdf'])])),
                ('thumbnail', models.ImageField(blank=True, null=True, storage=WeXlog.storage_backends.PrivateMediaStorage(), upload_to=talenttrack.models.AwardThumbnail)),
                ('slug', models.SlugField(blank=True, max_length=15, null=True, unique=True)),
            ],
            options={
                'ordering': ['-date_achieved'],
            },
        ),
        migrations.CreateModel(
            name='ClassMates',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_captured', models.DateField(auto_now_add=True)),
                ('date_confirmed', models.DateField(auto_now_add=True)),
                ('locked', models.BooleanField(default=False)),
                ('confirm', models.CharField(choices=[('S', 'Select'), ('C', 'Confirm'), ('R', 'Reject'), ('Y', 'Wrong Person')], default='S', max_length=1)),
                ('comments', models.TextField(blank=True, null=True)),
                ('publish_comment', models.BooleanField(default=False)),
                ('response', models.TextField(blank=True, null=True)),
                ('slug', models.SlugField(max_length=9, null=True, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, unique=True, verbose_name='Course name')),
                ('website', models.URLField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='CourseType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(max_length=60, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Designation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=60, unique=True, verbose_name='Designation')),
            ],
        ),
        migrations.CreateModel(
            name='EmailRemindValidate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subject', models.CharField(blank=True, max_length=240, null=True)),
                ('message', models.TextField(blank=True, null=True)),
                ('date_sent', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Lecturer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_captured', models.DateField(auto_now_add=True)),
                ('date_confirmed', models.DateField(auto_now_add=True)),
                ('locked', models.BooleanField(default=False)),
                ('confirm', models.CharField(choices=[('S', 'Select'), ('C', 'Confirm'), ('R', 'Reject'), ('Y', 'Wrong Person')], default='S', max_length=1, null=True)),
                ('comments', models.TextField(blank=True, null=True)),
                ('publish_comment', models.BooleanField(default=False)),
                ('response', models.TextField(blank=True, null=True, verbose_name='My Response')),
                ('slug', models.SlugField(max_length=9, null=True, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='LicenseCertification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cert_name', models.CharField(max_length=150, null=True)),
                ('country', django_countries.fields.CountryField(max_length=2)),
                ('cm_no', models.CharField(max_length=40, verbose_name='Membership / Credential Number')),
                ('upload', models.FileField(blank=True, null=True, storage=WeXlog.storage_backends.PrivateMediaStorage(), upload_to=talenttrack.models.CertFilename, validators=[django.core.validators.FileExtensionValidator(['pdf'])])),
                ('thumbnail', models.ImageField(blank=True, null=True, storage=WeXlog.storage_backends.PrivateMediaStorage(), upload_to=talenttrack.models.CertThumbnail)),
                ('issue_date', models.DateField()),
                ('expiry_date', models.DateField(blank=True, null=True)),
                ('current', models.BooleanField(default=True, verbose_name='Is this current?')),
                ('slug', models.SlugField(blank=True, null=True)),
            ],
            options={
                'ordering': ['-issue_date'],
            },
        ),
        migrations.CreateModel(
            name='Publications',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=500)),
                ('type', models.CharField(choices=[('F', 'Fiction'), ('N', 'Non-fiction')], default='F', max_length=1)),
                ('link', models.URLField(blank=True, null=True, verbose_name='Publication URL')),
                ('date_published', models.DateField()),
                ('description', models.TextField(verbose_name='Describe the Publication')),
                ('upload', models.FileField(blank=True, null=True, storage=WeXlog.storage_backends.PrivateMediaStorage(), upload_to=talenttrack.models.PublicationFilename, validators=[django.core.validators.FileExtensionValidator(['pdf'])])),
                ('thumbnail', models.ImageField(blank=True, null=True, storage=WeXlog.storage_backends.PrivateMediaStorage(), upload_to=talenttrack.models.PublicationThumbnail)),
                ('slug', models.SlugField(blank=True, max_length=15, null=True, unique=True)),
            ],
            options={
                'ordering': ['-date_published'],
            },
        ),
        migrations.CreateModel(
            name='Result',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Superior',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_captured', models.DateField(auto_now_add=True)),
                ('date_confirmed', models.DateField(auto_now_add=True)),
                ('locked', models.BooleanField(default=False)),
                ('confirm', models.CharField(choices=[('S', 'Select'), ('C', 'Confirm'), ('R', 'Reject'), ('Y', 'Wrong Person')], default='S', max_length=1)),
                ('comments', models.TextField(blank=True, null=True)),
                ('publish_comment', models.BooleanField(default=False)),
                ('quality', models.DecimalField(blank=True, choices=[(Decimal('1.0'), 'basic'), (Decimal('2.0'), 'working'), (Decimal('3.0'), 'good'), (Decimal('4.0'), 'master'), (Decimal('5.0'), 'grand master')], decimal_places=2, max_digits=5, null=True)),
                ('time_taken', models.DecimalField(blank=True, choices=[(Decimal('1.0'), 'basic'), (Decimal('2.0'), 'working'), (Decimal('3.0'), 'good'), (Decimal('4.0'), 'master'), (Decimal('5.0'), 'grand master')], decimal_places=2, max_digits=5, null=True)),
                ('complexity', models.DecimalField(blank=True, choices=[(Decimal('1.0'), 'basic'), (Decimal('2.0'), 'working'), (Decimal('3.0'), 'good'), (Decimal('4.0'), 'master'), (Decimal('5.0'), 'grand master')], decimal_places=2, max_digits=5, null=True)),
                ('response', models.TextField(blank=True, null=True)),
                ('slug', models.SlugField(max_length=9, null=True, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Topic',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('topic', models.CharField(max_length=60, unique=True)),
                ('hours', models.DecimalField(decimal_places=2, max_digits=5)),
            ],
        ),
        migrations.CreateModel(
            name='WorkClient',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_captured', models.DateField(auto_now_add=True)),
                ('date_confirmed', models.DateField(auto_now_add=True)),
                ('locked', models.BooleanField(default=False)),
                ('confirm', models.CharField(choices=[('S', 'Select'), ('C', 'Confirm'), ('R', 'Reject'), ('Y', 'Wrong Person')], default='S', max_length=1)),
                ('comments', models.TextField(blank=True, null=True)),
                ('publish_comment', models.BooleanField(default=False)),
                ('quality', models.DecimalField(blank=True, choices=[(Decimal('1.0'), 'basic'), (Decimal('2.0'), 'working'), (Decimal('3.0'), 'good'), (Decimal('4.0'), 'master'), (Decimal('5.0'), 'grand master')], decimal_places=2, max_digits=5, null=True)),
                ('time_taken', models.DecimalField(blank=True, choices=[(Decimal('1.0'), 'basic'), (Decimal('2.0'), 'working'), (Decimal('3.0'), 'good'), (Decimal('4.0'), 'master'), (Decimal('5.0'), 'grand master')], decimal_places=2, max_digits=5, null=True)),
                ('complexity', models.DecimalField(blank=True, choices=[(Decimal('1.0'), 'basic'), (Decimal('2.0'), 'working'), (Decimal('3.0'), 'good'), (Decimal('4.0'), 'master'), (Decimal('5.0'), 'grand master')], decimal_places=2, max_digits=5, null=True)),
                ('response', models.TextField(blank=True, null=True)),
                ('slug', models.SlugField(max_length=20, null=True, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='WorkCollaborator',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_captured', models.DateField(auto_now_add=True)),
                ('date_confirmed', models.DateField(auto_now_add=True)),
                ('locked', models.BooleanField(default=False)),
                ('confirm', models.CharField(choices=[('S', 'Select'), ('C', 'Confirm'), ('R', 'Reject'), ('Y', 'Wrong Person')], default='S', max_length=1)),
                ('comments', models.TextField(blank=True, null=True)),
                ('publish_comment', models.BooleanField(default=False)),
                ('quality', models.DecimalField(blank=True, choices=[(Decimal('1.0'), 'basic'), (Decimal('2.0'), 'working'), (Decimal('3.0'), 'good'), (Decimal('4.0'), 'master'), (Decimal('5.0'), 'grand master')], decimal_places=2, max_digits=5, null=True)),
                ('time_taken', models.DecimalField(blank=True, choices=[(Decimal('1.0'), 'basic'), (Decimal('2.0'), 'working'), (Decimal('3.0'), 'good'), (Decimal('4.0'), 'master'), (Decimal('5.0'), 'grand master')], decimal_places=2, max_digits=5, null=True)),
                ('complexity', models.DecimalField(blank=True, choices=[(Decimal('1.0'), 'basic'), (Decimal('2.0'), 'working'), (Decimal('3.0'), 'good'), (Decimal('4.0'), 'master'), (Decimal('5.0'), 'grand master')], decimal_places=2, max_digits=5, null=True)),
                ('response', models.TextField(blank=True, null=True)),
                ('slug', models.SlugField(blank=True, max_length=9, null=True, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='WorkColleague',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_captured', models.DateField(auto_now_add=True)),
                ('date_confirmed', models.DateField(auto_now_add=True)),
                ('locked', models.BooleanField(default=False)),
                ('confirm', models.CharField(choices=[('S', 'Select'), ('C', 'Confirm'), ('R', 'Reject'), ('Y', 'Wrong Person')], default='S', max_length=1)),
                ('comments', models.TextField(blank=True, null=True)),
                ('publish_comment', models.BooleanField(default=False)),
                ('quality', models.DecimalField(blank=True, choices=[(Decimal('1.0'), 'basic'), (Decimal('2.0'), 'working'), (Decimal('3.0'), 'good'), (Decimal('4.0'), 'master'), (Decimal('5.0'), 'grand master')], decimal_places=2, max_digits=5, null=True)),
                ('time_taken', models.DecimalField(blank=True, choices=[(Decimal('1.0'), 'basic'), (Decimal('2.0'), 'working'), (Decimal('3.0'), 'good'), (Decimal('4.0'), 'master'), (Decimal('5.0'), 'grand master')], decimal_places=2, max_digits=5, null=True)),
                ('complexity', models.DecimalField(blank=True, choices=[(Decimal('1.0'), 'basic'), (Decimal('2.0'), 'working'), (Decimal('3.0'), 'good'), (Decimal('4.0'), 'master'), (Decimal('5.0'), 'grand master')], decimal_places=2, max_digits=5, null=True)),
                ('response', models.TextField(blank=True, null=True)),
                ('slug', models.SlugField(max_length=9, null=True, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='WorkExperience',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_from', models.DateField()),
                ('date_to', models.DateField()),
                ('date_captured', models.DateField(auto_now_add=True)),
                ('upload', models.FileField(blank=True, null=True, storage=WeXlog.storage_backends.PrivateMediaStorage(), upload_to=talenttrack.models.ExpFilename, validators=[django.core.validators.FileExtensionValidator(['pdf'])])),
                ('thumbnail', models.ImageField(blank=True, null=True, storage=WeXlog.storage_backends.PrivateMediaStorage(), upload_to=talenttrack.models.ExpThumbnail)),
                ('score', models.SmallIntegerField(default=0)),
                ('employment_type', models.CharField(blank=True, choices=[('F', 'Freelance'), ('C', 'Contract'), ('E', 'Employee')], default='F', max_length=1, null=True)),
                ('title', models.CharField(blank=True, max_length=250, null=True)),
                ('comment', models.TextField(blank=True, null=True)),
                ('publish_comment', models.BooleanField(default=False)),
                ('estimated', models.BooleanField(default=False)),
                ('prelog', models.BooleanField(default=False)),
                ('wexp', models.BooleanField(default=False)),
                ('hours_worked', models.DecimalField(decimal_places=2, max_digits=5, null=True)),
                ('edt', models.BooleanField(default=False)),
                ('slug', models.SlugField(blank=True, max_length=10, null=True, unique=True)),
                ('company', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='enterprises.Enterprise', verbose_name='Company')),
                ('companybranch', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='enterprises.Branch', verbose_name='Company Branch')),
                ('course', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='talenttrack.Course')),
                ('designation', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='talenttrack.Designation')),
                ('industry', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='enterprises.Industry')),
                ('project', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='project.ProjectData', verbose_name='On Project')),
                ('project_data', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='project.ProjectPersonalDetails', verbose_name='Project')),
                ('skills', models.ManyToManyField(related_name='experience', to='db_flatten.SkillTag')),
            ],
        ),
    ]
